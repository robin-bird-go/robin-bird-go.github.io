[{"id":"7e3ba3961e407105f961544355df31ba","title":"git笔记","content":"git（ver 2.x）正式学习内容1.用户配置\ngit config —list\n系统级配置文件含有系统里每位用户及他们所拥有的仓库的配置值。其位置为git的安装目录下的/etc/gitconfig，即如果git的安装目录为D:\\Git，则配置文件地址为D:\\Git\\etc\\gitconfig。\n\ngit config —local 设置局部的用户\n\n\n2.版控开始(超详细）使用git命令行将本地仓库代码上传到gitee&#x2F;github远程仓库_悟空打码的博客-CSDN博客\n\ngit init\ngit add .\ngit commit -m “”\ngit remote add origin 仓库地址\ngit pull –rebase origin master\ngit push -u origin master\n\n3.具体解释\nuntracked files\n\n这个未追踪的文件存在与你真实的文件夹下面，但是git没有对它做版控，就是没管它，所以git仓库中相当于没有这个\nto track，使用git add\n\ngit add .和—all区别\n\n2.git add all和git add .区别\n—all更厉害\n\ngit restore\n\n在git add 后又改动之前add过的文件，这个操作可以让它恢复到使用add之后的状态\n\n\ngit commit\n\n都只提交“暂存区”的内容（也就是你add的）\n\ncommit一次性提交\n\n![Untitled](git笔记.assets&#x2F;Untitled 1.png)\n\n图形化提交建议看vscode的git graph\n\n具体查询什么人的、关键字的，见书P47\n具体查询某个文件的commit记录，见书P61\n\nrm  + file_name  删除（remove）\n\n![Untitled](git笔记.assets&#x2F;Untitled 2.png)\ngit rm  file_name &#x3D; rm+ git add  file_name\n\ngit mv改名\n\ngit mv    origin_name    after_name\n\n移除追踪\n\n方法一：gitignore文件改\n方法二：git rm file_name  —cached\n\n修改commit\n\n用于提交之前：git commit —amend -m “new commit”\n![Untitled](git笔记.assets&#x2F;Untitled 3.png)\n\ncommit后又想追加add\n\ngit add file_nae\ngit commit —amend —no-edit\n\n追踪ignore规定忽略的文件\n\ngit add -f file_name\n忽略的具体操作见P61\n\n查看具体某个文件的编辑成员\n\ngit blame file_name\n\n误删后挽回\n\ngit checkout [位置，默认当前暂存区]  file_name\n位置可以是HEAD~2，表示2个版本前的file_name被恢复到当前本地文件路径和暂存区\n\n撤销commit\n\n\ngit reset [目标历史提交]\n\n意为将当前commit退回到某次提交的状态\n —mixed \n删除当前暂存区文件，但是本地是你自己的，不会动\n—soft\n本地head移动到你指定的位置，但本地代码也不会变\n![Untitled](git笔记.assets&#x2F;Untitled 4.png)\n—hard\n本地文件和暂存区都要受到影响\n![Untitled](git笔记.assets&#x2F;Untitled 5.png)\n![Untitled](git笔记.assets&#x2F;Untitled 6.png)\nreset意为：前往\nreset寄了，直接git reset [SHE-1] —hard\n无脑就好\n\n部分修改commit（建议使用图形软件）\n\ngit 分支实用操作\n【开新分支】 git checkout   -b  new_br_name      base_br_name（不给默认head） \n【查看当前分支】git branch \n【改名】git branch -m  origin   new\n【删除】 git branch -d&#x2F;D(强制)  branch_name\n【合并1-merge】git merge      merged_branch_name\n【合并1-撤销】git reset HEAD^  —hard\n【合并2-rebase】git rebase     new_base_name\n\nrebase这里解释：指定新的基准是↑，为谁呢？为head指向的分支\n\nrebase时的commit的SHA1值变化是因为commit对象指向的上一个commit变化了（从原来的base到了新的base）\n![Untitled](git笔记.assets&#x2F;Untitled 7.png)\n\n\n【合并2-rebase】git reset ORIG_HEAD —hard\n\n\n4.git原理\n每次commit的序列号—SHA1\n用的SHA1算法，根据你提交的内容（blob、tree）来计算，很难会重复\n误删的commit的SHA1值找回见P127\n\ngit add的文件（必须有内容且只看内容，无视文件名和类型）\n会被临时计算SHA1值并放在objects&#x2F;下面，内容就是原文本被压缩后的结果\n\ngit结构\n本质是一个DAG，有向无环图，它不是层级关系，而是互相指指指的，因为又可能一个commit的文件版本是很早的，那就不存在层级，有新的内容就创建新的对象，没有新的那就是保持原来的对象指向（当然每次新的commit得变，根目录    的SHA1值得变）\n\nHEAD\n牢记，head指向的commit就是一切git操作的基础，比如git merge abb，如果当前head指向master，那就是把abb内容和master的最新commit合并，并更新master\n\n4大对象\nblob是文件\ntree指向文件夹\ncommit指向前一个commit和一个tree（根）\n![Untitled](git笔记.assets&#x2F;Untitled 8.png)\ntag\n总体关系总结：P93\n\ncommit形象理解-贴纸（删除就是撕下物品上的贴纸）\n![Untitled](git笔记.assets&#x2F;Untitled 9.png)\n![Untitled](git笔记.assets&#x2F;Untitled 10.png)\n![Untitled](git笔记.assets&#x2F;Untitled 11.png)\n\n合并冲突，记得把冲突文件修改好后再add，重新commit&#x2F;rebase\n\n\n","slug":"git笔记","date":"2023-08-29T14:50:11.000Z","categories_index":"","tags_index":"","author_index":"一只小知更鸟"},{"id":"a352508692bf1c2505d11aa297f25b2c","title":"blog配置踩坑过程","content":"ヾ(✿ﾟ▽ﾟ)ノ好耶！小博客站配置成功了！超级喜欢aurora的主题,给宣传一下：https://aurora.tridiamond.tech/zh/然后此文用来记录俺的踩坑过程（当然也可以借鉴配置的经验~）\n开始吧~(^_−)☆1.ubuntu下的尝试由于本地安装了nodejs，但是版本一直没更新好（特别旧），所以折腾好久决定换windows，这里寄寄\n2.windows安装为了搭建，需要安装以下东西\n\ngit :https://blog.csdn.net/mukes/article/details/115693833\nnodejs :nodejs.org&#x2F;zh-cn （这个直接点链接下载稳定版本无脑安装就是）\n\n3.github密钥设置本地（我暂时没用gitee）随便点开一个文件夹，然后右键-&gt;git bash here\ngit config --global user.name &quot;GitHub 用户名&quot;\ngit config --global user.email &quot;GitHub 邮箱&quot;\n\n#下面运行完之后一路回车\nssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;\n\n然后进入[C:\\Users\\用户名.ssh] （在windows系统的UI界面上可能会先进入C盘，再用户，再你的用户名（比如我的是robinbird），这里面才能找到.ssh文件夹）找到里面的id_rsa.pub 文件，code或者记事本open并复制内容~\ngithub密钥设置github登陆后-&gt;右上角头像-&gt;settings-&gt;SSH and GPG keys-&gt;New SSH key\nssh-key名字自定义，密码输入刚才复制的，然后add就可以\n最后一步再git bash\nssh -T git@github.com\n\n接着yes+回车，结束！\n4.创建blog仓库现在我们需要在电脑里一个合适的地方创blog仓库，比如我就在E盘根目录直接新建文件夹\n\n进入E:\\my_blog，然后git bash，开始我们的搭建！！\ntips：这里我直接默认带了aurora的主题一起了，需要其他主题的请直接看：使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎 (zhihu.com)\n初始化hexo init\nnpm install hexo-theme-aurora hexo-plugin-aurora --save\n\n\n\n在github上创建远程仓库直接new_repository-&gt;仓库名给：[你的github用户名].github.io，勾选initialise with readme（这里注意，个人习惯是把默认分支名改为master的，你勾选了就会提示）\n\n这里创建完了之后我建议是，把readme给删除了，让仓库为空的状态，再继续\n修改配置跟着aurora官方配置来就是，但是注意：一定要提前更新aurora为2.x版本！默认是1.6，先更新！！\n快速上手 | Hexo Aurora 使用文档 (tridiamond.tech)\n以及注意别忽略步骤4的url\n\n大坑预警！不知道会不会其他人也像我一样有类似的经历：本地测试完全可以，但是一部署deploy之后，我的网页page啥也没有\n那么建议直接在git bash跑下面代码，不知道为什么，反正最后跑了就好了，以及耐心等待一下，github上传也需要时间的：\nnpm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive\n\n参考这个，感谢这个博主：部署Hexo踩过的坑—hexo更换主题 - 知乎 (zhihu.com)\n最后的最后遇事不决，三步走\nhexo clean &amp; hexo g &amp; hexo d\n\n祝大家都能有个好心情~~~以及也搭建一个好博客出来！\n","slug":"blog配置踩坑过程","date":"2023-08-29T02:55:10.000Z","categories_index":"","tags_index":"blog","author_index":"一只小知更鸟"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2023-08-29T01:38:36.268Z","categories_index":"","tags_index":"","author_index":"一只小知更鸟"}]