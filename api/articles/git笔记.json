{"title":"git笔记","uid":"7e3ba3961e407105f961544355df31ba","slug":"git笔记","date":"2023-08-29T14:50:11.000Z","updated":"2023-09-01T14:25:57.311Z","comments":true,"path":"api/articles/git笔记.json","keywords":null,"cover":"https://s1.ax1x.com/2023/09/01/pPBSyUs.jpg","content":"<h1 id=\"git（ver-2-x）正式学习内容\"><a href=\"#git（ver-2-x）正式学习内容\" class=\"headerlink\" title=\"git（ver 2.x）正式学习内容\"></a>git（ver 2.x）正式学习内容</h1><h3 id=\"1-用户配置\"><a href=\"#1-用户配置\" class=\"headerlink\" title=\"1.用户配置\"></a>1.用户配置</h3><ul>\n<li><p>git config —list</p>\n<p>系统级配置文件含有系统里每位用户及他们所拥有的仓库的配置值。其位置为git的安装目录下的<code>/etc/gitconfig</code>，即如果git的安装目录为<code>D:\\Git</code>，则配置文件地址为<code>D:\\Git\\etc\\gitconfig</code>。</p>\n</li>\n<li><p>git config —local 设置局部的用户</p>\n</li>\n</ul>\n<h3 id=\"2-版控开始\"><a href=\"#2-版控开始\" class=\"headerlink\" title=\"2.版控开始\"></a>2.版控开始</h3><p><a href=\"https://blog.csdn.net/weixin_43896643/article/details/113803354\">(超详细）使用git命令行将本地仓库代码上传到gitee&#x2F;github远程仓库_悟空打码的博客-CSDN博客</a></p>\n<ul>\n<li>git init</li>\n<li>git add .</li>\n<li>git commit -m “”</li>\n<li>git remote add origin 仓库地址</li>\n<li>git pull –rebase origin master</li>\n<li>git push -u origin master</li>\n</ul>\n<h3 id=\"3-具体解释\"><a href=\"#3-具体解释\" class=\"headerlink\" title=\"3.具体解释\"></a>3.具体解释</h3><ul>\n<li>untracked files</li>\n</ul>\n<p>这个未追踪的文件存在与你真实的文件夹下面，但是git没有对它做版控，就是没管它，所以git仓库中相当于没有这个</p>\n<p>to track，使用<strong>git add</strong></p>\n<ul>\n<li>git add .和—all区别</li>\n</ul>\n<p><a href=\"https://www.jianshu.com/p/2814288768fc\">2.git add all和git add .区别</a></p>\n<p>—all更厉害</p>\n<ul>\n<li>git restore</li>\n</ul>\n<p>在git add 后<strong>又改动</strong>之前add过的文件，这个操作可以让它恢复到使用add之后的状态</p>\n<p><img src=\"/post/git%E7%AC%94%E8%AE%B0/Untitled.png\" alt=\"Untitled\"></p>\n<ul>\n<li>git commit</li>\n</ul>\n<p>都只提交“暂存区”的内容（也就是你add的）</p>\n<ul>\n<li>commit一次性提交</li>\n</ul>\n<p><img src=\"/post/git%E7%AC%94%E8%AE%B0/Untitled1.png\" alt=\"Untitled\"></p>\n<ul>\n<li>图形化提交建议看vscode的git graph</li>\n</ul>\n<p>具体查询什么人的、关键字的，见书P47</p>\n<p>具体查询某个文件的commit记录，见书P61</p>\n<ul>\n<li>rm  + file_name  删除（remove）</li>\n</ul>\n<p><img src=\"/post/git%E7%AC%94%E8%AE%B0/Untitled2.png\" alt=\"Untitled\"></p>\n<p>git rm  file_name &#x3D; rm+ git add  file_name</p>\n<ul>\n<li>git mv改名</li>\n</ul>\n<p>git mv    origin_name    after_name</p>\n<ul>\n<li>移除追踪</li>\n</ul>\n<p>方法一：gitignore文件改</p>\n<p>方法二：git rm file_name  —cached</p>\n<ul>\n<li>修改commit</li>\n</ul>\n<p>用于提交之前：git commit —amend -m “new commit”</p>\n<p><img src=\"/post/git%E7%AC%94%E8%AE%B0/Untitled3.png\" alt=\"Untitled\"></p>\n<ul>\n<li>commit后又想追加add</li>\n</ul>\n<p>git add file_nae</p>\n<p>git commit —amend —no-edit</p>\n<ul>\n<li>追踪ignore规定忽略的文件</li>\n</ul>\n<p>git add -f file_name</p>\n<p>忽略的具体操作见P61</p>\n<ul>\n<li>查看具体某个文件的编辑成员</li>\n</ul>\n<p>git blame file_name</p>\n<ul>\n<li>误删后挽回</li>\n</ul>\n<p>git checkout [位置，默认当前暂存区]  file_name</p>\n<p>位置可以是HEAD~2，表示2个版本前的file_name被恢复到当前本地文件路径<strong>和暂存区</strong></p>\n<ul>\n<li>撤销commit</li>\n</ul>\n<ol>\n<li>git reset [目标历史提交]</li>\n</ol>\n<p>意为将当前commit退回到某次提交的状态</p>\n<p> —mixed </p>\n<p>删除当前暂存区文件，但是本地是你自己的，不会动</p>\n<p>—soft</p>\n<p>本地head移动到你指定的位置，但本地代码也不会变</p>\n<p><img src=\"/post/git%E7%AC%94%E8%AE%B0/Untitled4.png\" alt=\"Untitled\"></p>\n<p>—hard</p>\n<p>本地文件和暂存区都要受到影响</p>\n<p><img src=\"/post/git%E7%AC%94%E8%AE%B0/Untitled5.png\" alt=\"Untitled\"></p>\n<p><img src=\"/post/git%E7%AC%94%E8%AE%B0/Untitled6.png\" alt=\"Untitled\"></p>\n<p>reset意为：前往</p>\n<p><strong>reset寄了，直接git reset [SHE-1] —hard</strong></p>\n<p><strong>无脑就好</strong></p>\n<ul>\n<li><p>部分修改commit（建议使用图形软件）</p>\n</li>\n<li><p>git 分支实用操作</p>\n<p>【开新分支】 git checkout   -b  new_br_name      base_br_name（不给默认head） </p>\n<p>【查看当前分支】git branch </p>\n<p>【改名】git branch -m  origin   new</p>\n<p>【删除】 git branch -d&#x2F;D(强制)  branch_name</p>\n<p>【合并1-merge】git merge      merged_branch_name</p>\n<p>【合并1-撤销】<strong>git reset HEAD^  —hard</strong></p>\n<p>【合并2-rebase】git rebase     new_base_name</p>\n<ul>\n<li><p>rebase这里解释：指定新的基准是↑，为谁呢？为head指向的分支</p>\n</li>\n<li><p>rebase时的commit的SHA1值变化是因为commit对象指向的上一个commit变化了（从原来的base到了新的base）</p>\n<p><img src=\"/post/git%E7%AC%94%E8%AE%B0/Untitled7.png\" alt=\"Untitled\"></p>\n</li>\n</ul>\n<p>【合并2-rebase】git reset ORIG_HEAD —hard</p>\n</li>\n</ul>\n<h3 id=\"4-git原理\"><a href=\"#4-git原理\" class=\"headerlink\" title=\"4.git原理\"></a>4.git原理</h3><ul>\n<li><p>每次commit的序列号—SHA1</p>\n<p>用的SHA1算法，根据你提交的<strong>内容</strong>（blob、tree）来计算，很难会重复</p>\n<p>误删的commit的SHA1值找回见P127</p>\n</li>\n<li><p>git add的文件（必须有内容且只看内容，无视文件名和类型）</p>\n<p>会被临时计算SHA1值并放在objects&#x2F;下面，内容就是原文本被压缩后的结果</p>\n</li>\n<li><p>git结构</p>\n<p>本质是一个DAG，有向无环图，它不是层级关系，而是互相指指指的，因为又可能一个commit的文件版本是很早的，那就不存在层级，有新的内容就创建新的对象，没有新的那就是保持原来的对象指向（当然每次新的commit得变，根目录    的SHA1值得变）</p>\n</li>\n<li><p>HEAD</p>\n<p>牢记，<strong>head指向的commit就是一切git操作的基础</strong>，比如git merge abb，如果当前head指向master，那就是把abb内容和master的最新commit合并，并更新master</p>\n</li>\n<li><p>4大对象</p>\n<p>blob是文件</p>\n<p>tree指向文件夹</p>\n<p>commit指向前一个commit和一个tree（根）</p>\n<p><img src=\"/post/git%E7%AC%94%E8%AE%B0/Untitled8.png\" alt=\"Untitled\"></p>\n<p>tag</p>\n<p>总体关系总结：P93</p>\n</li>\n<li><p><strong>commit形象理解-贴纸</strong>（删除就是撕下物品上的贴纸）</p>\n<p><img src=\"/post/git%E7%AC%94%E8%AE%B0/Untitled9.png\" alt=\"Untitled\"></p>\n<p><img src=\"/post/git%E7%AC%94%E8%AE%B0/Untitled10.png\" alt=\"Untitled\"></p>\n<p><img src=\"/post/git%E7%AC%94%E8%AE%B0/Untitled11.png\" alt=\"Untitled\"></p>\n</li>\n<li><p>合并冲突，记得把冲突文件修<strong>改好后再add，重新commit&#x2F;rebase</strong></p>\n</li>\n</ul>\n","text":"git笔记...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"git","slug":"git","count":1,"path":"api/categories/git.json"}],"tags":[{"name":"git","slug":"git","count":1,"path":"api/tags/git.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#git%EF%BC%88ver-2-x%EF%BC%89%E6%AD%A3%E5%BC%8F%E5%AD%A6%E4%B9%A0%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">git（ver 2.x）正式学习内容</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">1.用户配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%89%88%E6%8E%A7%E5%BC%80%E5%A7%8B\"><span class=\"toc-text\">2.版控开始</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%85%B7%E4%BD%93%E8%A7%A3%E9%87%8A\"><span class=\"toc-text\">3.具体解释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-git%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">4.git原理</span></a></li></ol></li></ol></li></ol>","author":{"name":"一只小知更鸟","slug":"blog-author","avatar":"https://img1.imgtp.com/2023/08/29/RZ7FZ0Cx.png","link":"/","description":"大三狗在读,缓慢探索博客中...<br />热爱coding与控制,吉他画画也会一些~","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"牧羊少年奇幻之旅note","uid":"b0096e1d86822d90a1262f2022f5d15b","slug":"牧羊少年奇幻之旅note","date":"2023-09-01T11:18:15.000Z","updated":"2023-09-01T13:25:53.516Z","comments":true,"path":"api/articles/牧羊少年奇幻之旅note.json","keywords":null,"cover":"https://s1.ax1x.com/2023/09/01/pPBp0Rx.jpg","text":"《牧羊少年奇幻之旅》读书笔记捏~...","link":"","photos":[],"count_time":{"symbolsCount":"7.9k","symbolsTime":"7 mins."},"categories":[{"name":"book_note","slug":"book-note","count":1,"path":"api/categories/book-note.json"}],"tags":[{"name":"book_note","slug":"book-note","count":1,"path":"api/tags/book-note.json"}],"author":{"name":"一只小知更鸟","slug":"blog-author","avatar":"https://img1.imgtp.com/2023/08/29/RZ7FZ0Cx.png","link":"/","description":"大三狗在读,缓慢探索博客中...<br />热爱coding与控制,吉他画画也会一些~","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"blog配置踩坑过程","uid":"a352508692bf1c2505d11aa297f25b2c","slug":"blog配置踩坑过程","date":"2023-08-29T02:55:10.000Z","updated":"2023-09-01T14:36:18.706Z","comments":true,"path":"api/articles/blog配置踩坑过程.json","keywords":null,"cover":[],"text":"首次配好了hexo和aurora的主题！简单记录一下过程~...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"blog","slug":"blog","count":1,"path":"api/categories/blog.json"}],"tags":[{"name":"blog","slug":"blog","count":1,"path":"api/tags/blog.json"}],"author":{"name":"一只小知更鸟","slug":"blog-author","avatar":"https://img1.imgtp.com/2023/08/29/RZ7FZ0Cx.png","link":"/","description":"大三狗在读,缓慢探索博客中...<br />热爱coding与控制,吉他画画也会一些~","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}