<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://robin-bird-go.github.io/atom.xml" rel="self"/>
  
  <link href="https://robin-bird-go.github.io/"/>
  <updated>2023-08-29T15:32:45.269Z</updated>
  <id>https://robin-bird-go.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git笔记</title>
    <link href="https://robin-bird-go.github.io/post/git%E7%AC%94%E8%AE%B0.html"/>
    <id>https://robin-bird-go.github.io/post/git%E7%AC%94%E8%AE%B0.html</id>
    <published>2023-08-29T14:50:11.000Z</published>
    <updated>2023-08-29T15:32:45.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git（ver-2-x）正式学习内容"><a href="#git（ver-2-x）正式学习内容" class="headerlink" title="git（ver 2.x）正式学习内容"></a>git（ver 2.x）正式学习内容</h1><h3 id="1-用户配置"><a href="#1-用户配置" class="headerlink" title="1.用户配置"></a>1.用户配置</h3><ul><li><p>git config —list</p><p>系统级配置文件含有系统里每位用户及他们所拥有的仓库的配置值。其位置为git的安装目录下的<code>/etc/gitconfig</code>，即如果git的安装目录为<code>D:\Git</code>，则配置文件地址为<code>D:\Git\etc\gitconfig</code>。</p></li><li><p>git config —local 设置局部的用户</p></li></ul><h3 id="2-版控开始"><a href="#2-版控开始" class="headerlink" title="2.版控开始"></a>2.版控开始</h3><p><a href="https://blog.csdn.net/weixin_43896643/article/details/113803354">(超详细）使用git命令行将本地仓库代码上传到gitee&#x2F;github远程仓库_悟空打码的博客-CSDN博客</a></p><ul><li>git init</li><li>git add .</li><li>git commit -m “”</li><li>git remote add origin 仓库地址</li><li>git pull –rebase origin master</li><li>git push -u origin master</li></ul><h3 id="3-具体解释"><a href="#3-具体解释" class="headerlink" title="3.具体解释"></a>3.具体解释</h3><ul><li>untracked files</li></ul><p>这个未追踪的文件存在与你真实的文件夹下面，但是git没有对它做版控，就是没管它，所以git仓库中相当于没有这个</p><p>to track，使用<strong>git add</strong></p><ul><li>git add .和—all区别</li></ul><p><a href="https://www.jianshu.com/p/2814288768fc">2.git add all和git add .区别</a></p><p>—all更厉害</p><ul><li>git restore</li></ul><p>在git add 后<strong>又改动</strong>之前add过的文件，这个操作可以让它恢复到使用add之后的状态</p><p><img src="/git%E7%AC%94%E8%AE%B0.assets/Untitled.png" alt="Untitled"></p><ul><li>git commit</li></ul><p>都只提交“暂存区”的内容（也就是你add的）</p><ul><li>commit一次性提交</li></ul><p>![Untitled](git笔记.assets&#x2F;Untitled 1.png)</p><ul><li>图形化提交建议看vscode的git graph</li></ul><p>具体查询什么人的、关键字的，见书P47</p><p>具体查询某个文件的commit记录，见书P61</p><ul><li>rm  + file_name  删除（remove）</li></ul><p>![Untitled](git笔记.assets&#x2F;Untitled 2.png)</p><p>git rm  file_name &#x3D; rm+ git add  file_name</p><ul><li>git mv改名</li></ul><p>git mv    origin_name    after_name</p><ul><li>移除追踪</li></ul><p>方法一：gitignore文件改</p><p>方法二：git rm file_name  —cached</p><ul><li>修改commit</li></ul><p>用于提交之前：git commit —amend -m “new commit”</p><p>![Untitled](git笔记.assets&#x2F;Untitled 3.png)</p><ul><li>commit后又想追加add</li></ul><p>git add file_nae</p><p>git commit —amend —no-edit</p><ul><li>追踪ignore规定忽略的文件</li></ul><p>git add -f file_name</p><p>忽略的具体操作见P61</p><ul><li>查看具体某个文件的编辑成员</li></ul><p>git blame file_name</p><ul><li>误删后挽回</li></ul><p>git checkout [位置，默认当前暂存区]  file_name</p><p>位置可以是HEAD~2，表示2个版本前的file_name被恢复到当前本地文件路径<strong>和暂存区</strong></p><ul><li>撤销commit</li></ul><ol><li>git reset [目标历史提交]</li></ol><p>意为将当前commit退回到某次提交的状态</p><p> —mixed </p><p>删除当前暂存区文件，但是本地是你自己的，不会动</p><p>—soft</p><p>本地head移动到你指定的位置，但本地代码也不会变</p><p>![Untitled](git笔记.assets&#x2F;Untitled 4.png)</p><p>—hard</p><p>本地文件和暂存区都要受到影响</p><p>![Untitled](git笔记.assets&#x2F;Untitled 5.png)</p><p>![Untitled](git笔记.assets&#x2F;Untitled 6.png)</p><p>reset意为：前往</p><p><strong>reset寄了，直接git reset [SHE-1] —hard</strong></p><p><strong>无脑就好</strong></p><ul><li><p>部分修改commit（建议使用图形软件）</p></li><li><p>git 分支实用操作</p><p>【开新分支】 git checkout   -b  new_br_name      base_br_name（不给默认head） </p><p>【查看当前分支】git branch </p><p>【改名】git branch -m  origin   new</p><p>【删除】 git branch -d&#x2F;D(强制)  branch_name</p><p>【合并1-merge】git merge      merged_branch_name</p><p>【合并1-撤销】<strong>git reset HEAD^  —hard</strong></p><p>【合并2-rebase】git rebase     new_base_name</p><ul><li><p>rebase这里解释：指定新的基准是↑，为谁呢？为head指向的分支</p></li><li><p>rebase时的commit的SHA1值变化是因为commit对象指向的上一个commit变化了（从原来的base到了新的base）</p><p>![Untitled](git笔记.assets&#x2F;Untitled 7.png)</p></li></ul><p>【合并2-rebase】git reset ORIG_HEAD —hard</p></li></ul><h3 id="4-git原理"><a href="#4-git原理" class="headerlink" title="4.git原理"></a>4.git原理</h3><ul><li><p>每次commit的序列号—SHA1</p><p>用的SHA1算法，根据你提交的<strong>内容</strong>（blob、tree）来计算，很难会重复</p><p>误删的commit的SHA1值找回见P127</p></li><li><p>git add的文件（必须有内容且只看内容，无视文件名和类型）</p><p>会被临时计算SHA1值并放在objects&#x2F;下面，内容就是原文本被压缩后的结果</p></li><li><p>git结构</p><p>本质是一个DAG，有向无环图，它不是层级关系，而是互相指指指的，因为又可能一个commit的文件版本是很早的，那就不存在层级，有新的内容就创建新的对象，没有新的那就是保持原来的对象指向（当然每次新的commit得变，根目录    的SHA1值得变）</p></li><li><p>HEAD</p><p>牢记，<strong>head指向的commit就是一切git操作的基础</strong>，比如git merge abb，如果当前head指向master，那就是把abb内容和master的最新commit合并，并更新master</p></li><li><p>4大对象</p><p>blob是文件</p><p>tree指向文件夹</p><p>commit指向前一个commit和一个tree（根）</p><p>![Untitled](git笔记.assets&#x2F;Untitled 8.png)</p><p>tag</p><p>总体关系总结：P93</p></li><li><p><strong>commit形象理解-贴纸</strong>（删除就是撕下物品上的贴纸）</p><p>![Untitled](git笔记.assets&#x2F;Untitled 9.png)</p><p>![Untitled](git笔记.assets&#x2F;Untitled 10.png)</p><p>![Untitled](git笔记.assets&#x2F;Untitled 11.png)</p></li><li><p>合并冲突，记得把冲突文件修<strong>改好后再add，重新commit&#x2F;rebase</strong></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git（ver-2-x）正式学习内容&quot;&gt;&lt;a href=&quot;#git（ver-2-x）正式学习内容&quot; class=&quot;headerlink&quot; title=&quot;git（ver 2.x）正式学习内容&quot;&gt;&lt;/a&gt;git（ver 2.x）正式学习内容&lt;/h1&gt;&lt;h3 id=&quot;1</summary>
      
    
    
    
    
    <category term="git" scheme="https://robin-bird-go.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>blog配置踩坑过程</title>
    <link href="https://robin-bird-go.github.io/post/blog%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91%E8%BF%87%E7%A8%8B.html"/>
    <id>https://robin-bird-go.github.io/post/blog%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91%E8%BF%87%E7%A8%8B.html</id>
    <published>2023-08-29T02:55:10.000Z</published>
    <updated>2023-08-29T15:32:22.533Z</updated>
    
    <content type="html"><![CDATA[<p>ヾ(✿ﾟ▽ﾟ)ノ好耶！小博客站配置成功了！<br>超级喜欢aurora的主题,给宣传一下：<a href="https://aurora.tridiamond.tech/zh/">https://aurora.tridiamond.tech/zh/</a><br>然后此文用来记录俺的踩坑过程（当然也可以借鉴配置的经验~）</p><h1 id="开始吧-−-☆"><a href="#开始吧-−-☆" class="headerlink" title="开始吧~(^_−)☆"></a>开始吧~(^_−)☆</h1><h2 id="1-ubuntu下的尝试"><a href="#1-ubuntu下的尝试" class="headerlink" title="1.ubuntu下的尝试"></a>1.ubuntu下的尝试</h2><p>由于本地安装了nodejs，但是版本一直没更新好（特别旧），所以折腾好久决定换windows，这里寄寄</p><h2 id="2-windows安装"><a href="#2-windows安装" class="headerlink" title="2.windows安装"></a>2.windows安装</h2><p>为了搭建，需要安装以下东西</p><ul><li>git :<a href="https://blog.csdn.net/mukes/article/details/115693833">https://blog.csdn.net/mukes/article/details/115693833</a></li><li>nodejs :nodejs.org&#x2F;zh-cn （这个直接点链接下载稳定版本无脑安装就是）</li></ul><h2 id="3-github密钥设置"><a href="#3-github密钥设置" class="headerlink" title="3.github密钥设置"></a>3.github密钥设置</h2><h3 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h3><p>（我暂时没用gitee）<br>随便点开一个文件夹，然后右键-&gt;git bash here</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git config --global user.name &quot;GitHub 用户名&quot;git config --global user.email &quot;GitHub 邮箱&quot;#下面运行完之后一路回车ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code></pre><p>然后进入[C:\Users\用户名.ssh] （在windows系统的UI界面上可能会先进入C盘，再用户，再你的用户名（比如我的是robinbird），这里面才能找到.ssh文件夹）<br>找到里面的id_rsa.pub 文件，code或者记事本open并<u>复制内容~</u></p><h3 id="github密钥设置"><a href="#github密钥设置" class="headerlink" title="github密钥设置"></a>github密钥设置</h3><p>github登陆后-&gt;右上角头像-&gt;settings-&gt;SSH and GPG keys-&gt;New SSH key</p><p>ssh-key名字自定义，密码输入<u>刚才复制的</u>，然后add就可以</p><h3 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h3><p>再git bash</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh -T git@github.com</code></pre><p>接着yes+回车，结束！</p><h2 id="4-创建blog仓库"><a href="#4-创建blog仓库" class="headerlink" title="4.创建blog仓库"></a>4.创建blog仓库</h2><p>现在我们需要在电脑里一个合适的地方创blog仓库，比如我就在E盘根目录直接新建文件夹</p><p><img src="/blog%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91%E8%BF%87%E7%A8%8B.assets/image-20230829111325817.png" alt="image-20230829111325817"></p><p>进入E:\my_blog，然后<strong>git bash</strong>，开始我们的搭建！！</p><p>tips：这里我直接默认带了aurora的主题一起了，需要其他主题的请直接看：<a href="https://zhuanlan.zhihu.com/p/60578464">使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎 (zhihu.com)</a></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo initnpm install hexo-theme-aurora hexo-plugin-aurora --save</code></pre><h3 id="在github上创建远程仓库"><a href="#在github上创建远程仓库" class="headerlink" title="在github上创建远程仓库"></a>在github上创建远程仓库</h3><p>直接new_repository-&gt;仓库名给：[你的github用户名].github.io，勾选initialise with readme（这里注意，个人习惯是把默认分支名改为master的，你勾选了就会提示）</p><p><img src="/blog%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91%E8%BF%87%E7%A8%8B.assets/image-20230829111844655.png" alt="image-20230829111844655"></p><p>这里创建完了之后我建议是，把readme给删除了，让仓库为空的状态，再继续</p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>跟着aurora官方配置来就是，但是注意：一定要提前更新aurora为2.x版本！<strong>默认是1.6，先更新！！</strong></p><p><a href="https://aurora.tridiamond.tech/zh/guide/getting-started.html#%E4%BE%9D%E8%B5%96%E7%8E%AF%E5%A2%83">快速上手 | Hexo Aurora 使用文档 (tridiamond.tech)</a></p><p>以及注意别忽略步骤4的url</p><p><img src="/blog%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91%E8%BF%87%E7%A8%8B.assets/image-20230829112223775.png" alt="image-20230829112223775"></p><h3 id="大坑预警！"><a href="#大坑预警！" class="headerlink" title="大坑预警！"></a>大坑预警！</h3><p>不知道会不会其他人也像我一样有类似的经历：本地测试完全可以，但是一部署deploy之后，我的网页page啥也没有</p><p>那么建议直接在git bash跑下面代码，不知道为什么，反正最后跑了就好了，以及耐心等待一下，github<strong>上传也需要时间的</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</code></pre><p>参考这个，感谢这个博主：<a href="https://zhuanlan.zhihu.com/p/137946156">部署Hexo踩过的坑—hexo更换主题 - 知乎 (zhihu.com)</a></p><h3 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h3><p>遇事不决，三步走</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean &amp; hexo g &amp; hexo d</code></pre><p>祝大家都能有个好心情~~~以及也搭建一个好博客出来！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ヾ(✿ﾟ▽ﾟ)ノ好耶！小博客站配置成功了！&lt;br&gt;超级喜欢aurora的主题,给宣传一下：&lt;a href=&quot;https://aurora.tridiamond.tech/zh/&quot;&gt;https://aurora.tridiamond.tech/zh/&lt;/a&gt;&lt;br&gt;然后此文用</summary>
      
    
    
    
    
    <category term="blog" scheme="https://robin-bird-go.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://robin-bird-go.github.io/post/hello-world.html"/>
    <id>https://robin-bird-go.github.io/post/hello-world.html</id>
    <published>2023-08-29T01:38:36.268Z</published>
    <updated>2023-08-29T14:45:56.972Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
